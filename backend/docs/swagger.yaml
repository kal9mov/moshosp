openapi: 3.0.0
info:
  title: MosHosp API
  description: API для платформы помощи нуждающимся
  version: 1.0.0
servers:
  - url: https://api.moshosp.ru
    description: Production server
  - url: http://localhost:8080
    description: Local development server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        telegram_id:
          type: string
          example: "123456789"
        name:
          type: string
          example: "Иван Петров"
        phone:
          type: string
          example: "+7 (900) 123-45-67"
        email:
          type: string
          example: "ivan@example.com"
        avatar_url:
          type: string
          example: "https://i.pravatar.cc/150?img=1"
        role:
          type: string
          enum: [user, volunteer, admin]
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    UserStats:
      type: object
      properties:
        experience:
          type: integer
          example: 250
        level:
          type: integer
          example: 3
        completed_requests:
          type: integer
          example: 5
        volunteer_hours:
          type: integer
          example: 12
        achievements_count:
          type: integer
          example: 3

    Request:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
          example: "Нужна помощь с покупкой продуктов"
        description:
          type: string
          example: "Не могу сам сходить в магазин из-за болезни. Нужны молоко, хлеб, сыр, яйца и немного фруктов."
        location:
          type: string
          example: "ул. Ленина, 25, кв. 15"
        category_id:
          type: integer
        priority:
          type: string
          enum: [low, medium, high]
        status:
          type: string
          enum: [new, in_progress, completed, cancelled]
        author_id:
          type: integer
        volunteer_id:
          type: integer
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    RequestFullInfo:
      allOf:
        - $ref: '#/components/schemas/Request'
        - type: object
          properties:
            author:
              $ref: '#/components/schemas/UserShort'
            volunteer:
              $ref: '#/components/schemas/UserShort'
              nullable: true
            category:
              $ref: '#/components/schemas/Category'
            comments:
              type: array
              items:
                $ref: '#/components/schemas/Comment'
            ratings:
              type: array
              items:
                $ref: '#/components/schemas/Rating'

    UserShort:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        avatar_url:
          type: string

    Category:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        icon:
          type: string

    Comment:
      type: object
      properties:
        id:
          type: integer
        request_id:
          type: integer
        user_id:
          type: integer
        user:
          $ref: '#/components/schemas/UserShort'
        text:
          type: string
        created_at:
          type: string
          format: date-time

    Rating:
      type: object
      properties:
        id:
          type: integer
        request_id:
          type: integer
        user_id:
          type: integer
        rating:
          type: integer
          minimum: 1
          maximum: 5
        feedback:
          type: string
        created_at:
          type: string
          format: date-time

    Achievement:
      type: object
      properties:
        id:
          type: integer
        code:
          type: string
        name:
          type: string
        description:
          type: string
        icon:
          type: string
        category_id:
          type: integer
        rarity:
          type: string
          enum: [common, rare, epic, legendary]
        experience:
          type: integer
        created_at:
          type: string
          format: date-time

    Notification:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        title:
          type: string
        message:
          type: string
        type:
          type: string
        is_read:
          type: boolean
        data:
          type: object
        created_at:
          type: string
          format: date-time

    LoginRequest:
      type: object
      properties:
        telegram_data:
          type: object
          properties:
            id:
              type: string
            first_name:
              type: string
            last_name:
              type: string
            username:
              type: string
            photo_url:
              type: string
            auth_date:
              type: string
            hash:
              type: string
      required:
        - telegram_data

    LoginResponse:
      type: object
      properties:
        token:
          type: string
        refresh_token:
          type: string
        user:
          $ref: '#/components/schemas/User'

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        status:
          type: integer

    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string

    PaginatedResponse:
      type: object
      properties:
        total:
          type: integer
        page:
          type: integer
        limit:
          type: integer
        data:
          type: array
          items:
            type: object

paths:
  /api/auth/telegram:
    post:
      summary: Авторизация через Telegram
      description: Авторизует пользователя через данные Telegram Login Widget
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Успешная авторизация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Ошибка в запросе
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Ошибка авторизации
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/auth/refresh:
    post:
      summary: Обновление токена
      description: Обновляет JWT токен с помощью refresh токена
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh_token:
                  type: string
      responses:
        '200':
          description: Успешное обновление токена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Ошибка в запросе
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Неверный или просроченный токен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/users/me:
    get:
      summary: Получение профиля пользователя
      description: Возвращает информацию о текущем авторизованном пользователе
      tags:
        - users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/requests:
    get:
      summary: Получение списка запросов
      description: Возвращает список запросов с фильтрацией и пагинацией
      tags:
        - requests
      parameters:
        - name: status
          in: query
          schema:
            type: string
          description: Фильтр по статусу
        - name: category
          in: query
          schema:
            type: string
          description: Фильтр по категории
        - name: page
          in: query
          schema:
            type: integer
            default: 1
          description: Номер страницы
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
          description: Количество элементов на странице
      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/RequestFullInfo'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Создание нового запроса
      description: Создает новый запрос о помощи
      tags:
        - requests
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                location:
                  type: string
                category_id:
                  type: integer
                priority:
                  type: string
                  enum: [low, medium, high]
              required:
                - title
                - description
                - location
                - category_id
      responses:
        '201':
          description: Запрос успешно создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestFullInfo'
        '400':
          description: Ошибка в запросе
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/requests/{id}:
    get:
      summary: Получение запроса по ID
      description: Возвращает информацию о запросе
      tags:
        - requests
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID запроса
      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestFullInfo'
        '404':
          description: Запрос не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/requests/{id}/take:
    post:
      summary: Взятие запроса волонтером
      description: Волонтер берет запрос на выполнение
      tags:
        - requests
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID запроса
      responses:
        '200':
          description: Запрос успешно взят
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestFullInfo'
        '400':
          description: Ошибка в запросе
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Недостаточно прав
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Запрос не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Конфликт (запрос уже взят)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/game/me:
    get:
      summary: Получение игровых данных пользователя
      description: Возвращает игровые данные авторизованного пользователя
      tags:
        - game
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                type: object
                properties:
                  stats:
                    $ref: '#/components/schemas/UserStats'
                  achievements:
                    type: array
                    items:
                      $ref: '#/components/schemas/Achievement'
                  notifications:
                    type: array
                    items:
                      $ref: '#/components/schemas/Notification'
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse' 